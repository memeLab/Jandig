services:
  django:
    build:
      dockerfile: Dockerfile
      context: .
    user: jandig
    ports:
      - 8000:8000
    volumes:
      - ./:/jandig
      - uv_cache:/home/jandig/cache/uv
    env_file:
      - .envs/.example
    environment:
      - USE_GUNICORN=True
      - INSTALL_DEV=True
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/api/v1/status || exit 1"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 10s
    depends_on:
      storage:
          condition: service_started
      createbuckets:
          condition: service_started
      mailpit:
          condition: service_started
      postgres:
          condition: service_healthy

  postgres:
    image: postgres:16.8
    env_file:
      - .envs/.example
    environment:
      PGUSER: jandig
    command: postgres -c max_connections=10000
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "jandig"]
      interval: 5s
      timeout: 60s
      retries: 20
      start_interval: 5s
  
  storage:
    image: minio/minio:RELEASE.2022-09-17T00-09-45Z.hotfix.acb000d3a
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - media_data:/storage
    env_file:
      - .envs/.example
    command: server /storage --console-address ":9001"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000/minio/health/live || exit 1"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  createbuckets:
    image: minio/mc:RELEASE.2022-09-16T09-16-47Z
    depends_on:
      - storage
    env_file:
      - .envs/.example
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add myminio $${MINIO_S3_ENDPOINT_URL} $${MINIO_ROOT_USER} $${MINIO_ROOT_PASSWORD}) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb myminio/$${AWS_STORAGE_BUCKET_NAME};
      /usr/bin/mc policy set download myminio/$${AWS_STORAGE_BUCKET_NAME};
      /usr/bin/mc admin user add myminio $${MINIO_USER_ACCESS_KEY} $${MINIO_USER_SECRET_KEY};
      /usr/bin/mc admin policy set myminio readwrite user=$${MINIO_USER_ACCESS_KEY};
      exit 0;
      "
  mailpit:
    image: axllent/mailpit
    volumes:
      - mailpit_data:/data
      - ./etc/mailpit/:/self_signed/
    ports:
      - 8025:8025
      - 1025:1025 
    environment:
      MP_MAX_MESSAGES: 5000
      MP_DATABASE: /data/mailpit.db
      MP_SMTP_AUTH_ACCEPT_ANY: 1
      MP_SMTP_AUTH_ALLOW_INSECURE: 1
      MP_SMTP_TLS_CERT: /self_signed/mailpit_cert.pem
      MP_SMTP_TLS_KEY: /self_signed/mailpit_key.pem

  haproxy:
    image: haproxy:3.1
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./etc/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    depends_on:
      django:
        condition: service_healthy
      storage:
        condition: service_healthy

volumes:
  postgres_data:
  media_data:
  mailpit_data:
  uv_cache: