# Generated by Django 5.2.4 on 2025-08-17 17:31

import core.models
import django.db.models.deletion
import django_extensions.db.fields
import pgtrigger.compiler
import pgtrigger.migrations
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0026_alter_exhibit_slug_alter_exhibitevent_slug'),
        ('pghistory', '0007_auto_20250421_0444'),
        ('users', '0012_profileevent_profile_insert_insert_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Sound',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('file', models.FileField(upload_to='sounds/')),
                ('title', models.CharField(max_length=50)),
                ('author', models.CharField(max_length=60)),
                ('file_size', models.IntegerField(default=0)),
                ('file_name_original', models.CharField(max_length=255)),
                ('file_extension', models.CharField(choices=[('mp3', 'MP3'), ('ogg', 'OGG'), ('wav', 'WAV')], db_index=True, max_length=10)),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
            bases=(models.Model, core.models.ContentMixin),
        ),
        migrations.CreateModel(
            name='SoundEvent',
            fields=[
                ('pgh_id', models.AutoField(primary_key=True, serialize=False)),
                ('pgh_created_at', models.DateTimeField(auto_now_add=True)),
                ('pgh_label', models.TextField(help_text='The event label.')),
                ('id', models.BigIntegerField()),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('file', models.FileField(upload_to='sounds/')),
                ('title', models.CharField(max_length=50)),
                ('author', models.CharField(max_length=60)),
                ('file_size', models.IntegerField(default=0)),
                ('file_name_original', models.CharField(max_length=255)),
                ('file_extension', models.CharField(choices=[('mp3', 'MP3'), ('ogg', 'OGG'), ('wav', 'WAV')], max_length=10)),
            ],
            options={
                'abstract': False,
            },
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='artwork',
            name='insert_insert',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='artwork',
            name='update_update',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='object',
            name='insert_insert',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='object',
            name='update_update',
        ),
        migrations.AddField(
            model_name='object',
            name='audio_description',
            field=models.FileField(blank=True, null=True, upload_to='audio_descriptions/'),
        ),
        migrations.AddField(
            model_name='objectevent',
            name='audio_description',
            field=models.FileField(blank=True, null=True, upload_to='audio_descriptions/'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='artwork',
            trigger=pgtrigger.compiler.Trigger(name='insert_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "core_artworkevent" ("augmented_id", "author_id", "created", "description", "id", "marker_id", "modified", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position_x", "position_y", "scale_x", "scale_y", "sound_id", "title") VALUES (NEW."augmented_id", NEW."author_id", NEW."created", NEW."description", NEW."id", NEW."marker_id", NEW."modified", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."position_x", NEW."position_y", NEW."scale_x", NEW."scale_y", NEW."sound_id", NEW."title"); RETURN NULL;', hash='d3359fe5829e11a6cc85599867017cff14e99810', operation='INSERT', pgid='pgtrigger_insert_insert_65595', table='core_artwork', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='artwork',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "core_artworkevent" ("augmented_id", "author_id", "created", "description", "id", "marker_id", "modified", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "position_x", "position_y", "scale_x", "scale_y", "sound_id", "title") VALUES (NEW."augmented_id", NEW."author_id", NEW."created", NEW."description", NEW."id", NEW."marker_id", NEW."modified", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."position_x", NEW."position_y", NEW."scale_x", NEW."scale_y", NEW."sound_id", NEW."title"); RETURN NULL;', hash='191ad0543e2f60783f53cec0a62c61d91ea53f73', operation='UPDATE', pgid='pgtrigger_update_update_1ac7c', table='core_artwork', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='object',
            trigger=pgtrigger.compiler.Trigger(name='insert_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "core_objectevent" ("audio_description", "author", "created", "file_extension", "file_name_original", "file_size", "id", "modified", "owner_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "sound_id", "source", "thumbnail", "title") VALUES (NEW."audio_description", NEW."author", NEW."created", NEW."file_extension", NEW."file_name_original", NEW."file_size", NEW."id", NEW."modified", NEW."owner_id", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."sound_id", NEW."source", NEW."thumbnail", NEW."title"); RETURN NULL;', hash='fb47c64b9812971f92b28ca10dfcb8c004d338e4', operation='INSERT', pgid='pgtrigger_insert_insert_25a7e', table='core_object', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='object',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "core_objectevent" ("audio_description", "author", "created", "file_extension", "file_name_original", "file_size", "id", "modified", "owner_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "sound_id", "source", "thumbnail", "title") VALUES (NEW."audio_description", NEW."author", NEW."created", NEW."file_extension", NEW."file_name_original", NEW."file_size", NEW."id", NEW."modified", NEW."owner_id", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."sound_id", NEW."source", NEW."thumbnail", NEW."title"); RETURN NULL;', hash='2f104211d97d163044a73498948ecd8bf94a65ae', operation='UPDATE', pgid='pgtrigger_update_update_27852', table='core_object', when='AFTER')),
        ),
        migrations.AddField(
            model_name='sound',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='sounds', to='users.profile'),
        ),
        migrations.AddField(
            model_name='artwork',
            name='sound',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='artworks', to='core.sound'),
        ),
        migrations.AddField(
            model_name='artworkevent',
            name='sound',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='core.sound'),
        ),
        migrations.AddField(
            model_name='exhibit',
            name='sounds',
            field=models.ManyToManyField(blank=True, related_name='exhibits', to='core.sound'),
        ),
        migrations.AddField(
            model_name='object',
            name='sound',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='ar_objects', to='core.sound'),
        ),
        migrations.AddField(
            model_name='objectevent',
            name='sound',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='core.sound'),
        ),
        migrations.AddField(
            model_name='soundevent',
            name='owner',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', related_query_name='+', to='users.profile'),
        ),
        migrations.AddField(
            model_name='soundevent',
            name='pgh_context',
            field=models.ForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='pghistory.context'),
        ),
        migrations.AddField(
            model_name='soundevent',
            name='pgh_obj',
            field=models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, related_name='events', to='core.sound'),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='sound',
            trigger=pgtrigger.compiler.Trigger(name='insert_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func='INSERT INTO "core_soundevent" ("author", "created", "file", "file_extension", "file_name_original", "file_size", "id", "modified", "owner_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "title") VALUES (NEW."author", NEW."created", NEW."file", NEW."file_extension", NEW."file_name_original", NEW."file_size", NEW."id", NEW."modified", NEW."owner_id", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."title"); RETURN NULL;', hash='60ad213f2cae9c1ba07590c4edcfc4bd68aa71d9', operation='INSERT', pgid='pgtrigger_insert_insert_fe2cc', table='core_sound', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='sound',
            trigger=pgtrigger.compiler.Trigger(name='update_update', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (OLD.* IS DISTINCT FROM NEW.*)', func='INSERT INTO "core_soundevent" ("author", "created", "file", "file_extension", "file_name_original", "file_size", "id", "modified", "owner_id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "title") VALUES (NEW."author", NEW."created", NEW."file", NEW."file_extension", NEW."file_name_original", NEW."file_size", NEW."id", NEW."modified", NEW."owner_id", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."title"); RETURN NULL;', hash='adc93c06a43156973cae34c15711423ebcb22657', operation='UPDATE', pgid='pgtrigger_update_update_8c5ab', table='core_sound', when='AFTER')),
        ),
    ]
