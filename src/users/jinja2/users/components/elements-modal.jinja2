{% extends '/users/components/generic-modal.jinja2' %}

<link rel="stylesheet" href="{{ static ('css/repository-list.css') }}">

{% block title %}
    <h1 id="modal-title"></h1>
{% endblock %}

{% block content %}
    <p id="element-author"></p>
    <p id="element-upload-info"></p>
    <p id="element-analytics"></p>
    <p id="download"> Download file:</p>
    <p id="element-download"></p>

    <script>
        function elementAuthor(author){
            $('#element-author').text({{ _("by ")|tojson }} + author);
        }
        function uploadedBy(owner, date){
            $('#element-upload-info').replaceWith(
                    '<p id="element-upload-info">' +
                    {{ _("Uploaded by ")|tojson }} +
                    owner.username + ', ' +
                    {{ _("in ")|tojson }} + new Date(date).toLocaleDateString() + '</p>'
                )
        }
        function usedIn(artworks_count, exhibits_count, element_src, element_id, elemType){

            $('#element-analytics').replaceWith(
                '<p id="element-analytics">'+
                {{ _(" Used in ")|tojson }} + '<a href="{{ url('related-content') }}?id=' + element_id + '&type=' + elemType + '">' +
                artworks_count +  {{ _(" artworks")|tojson }} + '</a>' +
                {{ _(" and in ")|tojson }} + '<a href="{{ url('related-content') }}?id=' + element_id + '&type=' + elemType + '">' + exhibits_count +
                {{ _(" Exhibits")|tojson }} + '</a>' +
                ( element_src.endsWith('.mp4') || element_src.endsWith('.webm') ? 
                    '<video muted autoplay loop id="element-src" class="preview-content" src="' + element_src + '"></video>' : 
                    '<img id="element-src" class="preview-content" src="' + element_src + '"/>')
            )
        }
        function usedInExhibit(marker_id, object_id, exhibits_count, marker, augmented, element_id){
            let object_tag = ''
            let augmented_src = augmented.source 
            if(augmented_src.split('.')[1] == 'mp4' || augmented_src.split('.')[1] == 'webm'){
                object_tag = '<video muted autoplay loop id="' + object_id + '" class="trigger-erase artwork-content" data-elem-type="object" src="' + augmented_src + '"/></p>'
            } else {
                object_tag = '<img id="' + object_id + '" class="trigger-erase artwork-content" data-elem-type="object" src="' + augmented_src + '"/></p>'
            }

            $('#element-analytics').replaceWith(
                '<p id="element-analytics">'+
                {{ _(" Used in ")|tojson }} + '<a href="{{ url('related-content') }}?id=' + element_id + '&type=artwork">' +
                exhibits_count +
                {{ _(" Exhibits")|tojson }} + '</a>' +
                '<img id="' + marker_id + '" class="trigger-erase artwork-content" data-elem-type="marker" src="' + marker.source + '"/>' +
                object_tag
            )
            $('.trigger-erase').click(eraseModal);
        }


        function downloadElement(element_type, file_size, element_src){
            if(element_type == "marker"){
                $('#element-download').replaceWith(
                    '<p id="element-download">' +
                    '<a id="png-download" href="'+ element_src +'">Download .png (' + file_size + ' kb)</a></p>'
                )
            }else{
                $('#element-download').replaceWith(
                    '<p id="element-download">' +
                    '<a id="gif-download" href="'+ element_src +'" download>Download .gif (' + file_size + ' kb)</a></p>'
                )
            }
        }
        function replaceButtons(title, description){
            $('#share-element').replaceWith(
               '<h4>Title: ' + title + '</h4>'
            );
            $('#create-artwork').replaceWith(
                '<p>' + description + '</p>'
            );
        }

        function fillModal(element){
            let elemType = element.attr('data-elem-type');
            let title = element.attr('title')
            let element_id = element.attr('id')

            if(!title) {
                $('#modal-title').text({{ _("This is a Jandig ")|tojson }} + elemType);
            } else if (title != '') {
                $('#modal-title').text(title);
            } else {
                $('#modal-title').text({{ _("This is a Jandig ")|tojson }} + elemType);
            }

            // Select the API endpoint based on the element type /api/v1/<>/id/ 
            let elemUrl;
            if (elemType == "marker") {
                elemUrl = {{ url('marker-list')|tojson }};
            } else if (elemType == "object") {
                elemUrl = {{ url('object-list')|tojson }};
            } else if (elemType == "artwork") {
                elemUrl = {{ url('artwork-list')|tojson }};
            } else if (elemType == "exhibit") {
                elemUrl = {{ url('exhibit-list')|tojson }};
            } else {
                console.log("Element type not recognized");
            }
            elemUrl += element.attr('id');

            if(elemType != "artwork"){
                $('#share-element').text(
                    {{ _('Share this ')|tojson }} + elemType
                );
                $('#create-artwork').text(
                     {{ _('Create artwork with this ')|tojson }} + elemType
                );
                $.ajax({
                    url: elemUrl,
                    success: function(data){
                        elementAuthor(data['author']);
                        uploadedBy(data['owner'], data['uploaded_at']);
                        usedIn(data['artworks_count'], data['exhibits_count'], data['source'], element_id, elemType);
                        downloadElement(data['type'], data["file_size"]/1000, data['source']);
                    }
                });
            }else{
                $('#download').attr('hidden', true)
                $.ajax({
                    url: elemUrl,
                    success: function(data){
                        elementAuthor(data['author'].username);
                        usedInExhibit(data['marker']['id'], data['augmented']['id'], data['exhibits_count'], data['marker'], data['augmented'], element_id);
                        replaceButtons(data['title'], data['description']);
                        downloadElement(data['type'], data['augmented'].file_size/1000, data['augmented'].source);
                    }
                });
            }
        }

        function eraseModal() {
            $('#element-analytics').replaceWith('<p id="element-analytics"></p>');
            $('#element-author').replaceWith('<p id="element-author"></p>');
            fillModal($(this));
        }


        function manageModal(){
            element = $(this);
            fillModal(element);
        }

        $('.trigger-modal').click(manageModal);

    </script>
{% endblock %}
