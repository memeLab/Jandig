
{% extends '/core/home.jinja2' %}

{% block content %}
    <section class="upload container">
        {# FIXME: maybe this can be improved #}
        <link rel="stylesheet" href="{{ static ('css/upload.css') }}">

        {% if form_type == 'marker' and edit == False %}
            <h2>{{ _('Upload Marker') }}</h2>
        {% elif form_type == 'object' and edit == False %}
            <h2>{{ _('Upload Object') }}</h2>
        {% else %}
            <h2>{{_('Edit_object')}}</h2>
        {% endif %}
        <section class="upload-form">
            <div class="container">
                <form name="upload-form" method="post" enctype="multipart/form-data">
                    {{ csrf_input }}
                    {% if form_type == 'object' %}
                        <p class="title-field"  id="title-field">
                            <h3>{{_("Choose Object's title")}}
                            {{ form.visible_fields()[2] }}
                            {{ form.visible_fields()[2].errors }}
                        </p>
                    {% endif %}
                    <p class="upload-field" id="source-field">
                    {%if route == 'object-upload' %}
                        <h3>{{_("Choose Object")}}</h3>
                    {% else %}
                        <blockquote>
                            No Marker files yet? Don't fret! You can get them here
                            <button type="button" onclick="window.open('/generator', '_blank')">MARKER GENERATOR</button>
                        </blockquote>
                        <p class="title-field"  id="title-field">
                            <h3>{{_("Choose Marker's title")}}
                            {{ form.visible_fields()[2] }}
                            {{ form.visible_fields()[2].errors }}
                        </p>
                        <h3>{{ _("Choose Marker image") }}</h3>
                    {% endif %}
                        {{ form.visible_fields()[0] }}
                        {{ form.visible_fields()[0].errors }}
                    </p>
                    {% if form_type == 'object' %}
                    <div id="edit_object_attributes">
                        <h2 id="scaleTitle">{{_("Adjust scale")}}</h2>
                        <span
                            id="tooltipText"
                            data-text="{{_('Scale should be adjusted relative to Marker size on the screen. A scale of 2 will render an Object twice the size of the Marker.')}}"
                            class="tooltip"
                        >
                            ?
                        </span>
                        <input id="scale" class="trigger-change-value" value ="1">

                        <h2 id="positionTitle">{{_("Adjust position")}}</h2>
                        <span 
                            id="tooltipText"
                            data-text="Position should be adjusted relative to the Marker's size on the screen. If horizontal position is 2, the center of the Object will be in a distance 2 times the size of its Marker's side to the right. If it's -1, it will be shown to the left." 
                            class="tooltip"
                        >
                            ?
                        </span>

                        {% with xposition=0, yposition=0 %}
                            {% include "users/components/object-position.jinja2" %}
                        {% endwith %}

                        {{ form.hidden_fields()[0] }}
                        {{ form.hidden_fields()[0].errors }}
                        {{ form.hidden_fields()[1] }}
                        {{ form.hidden_fields()[1].errors }}
                        {{ form.hidden_fields()[2] }}
                        {{ form.hidden_fields()[2].errors }}

                    </div>
                    {% endif %}
                    {% if form_type == 'marker' %}
                        <h3>{{ _('Choose .patt file') }}</h3>
                        <div class="upload-field" id="patt-field">
                            {{ form.visible_fields()[3] }}
                            {{ form.visible_fields()[3].errors }}
                        </div>
                    {% endif %}
                    <p class="form-options">

                        <input id="author-chk" type="checkbox" name="author" value="1">
                        {% if form_type == 'marker' %}
                            {{ _("I'm this Marker author") }}
                        {% elif form_type == 'object' %}
                            {{ _("I'm this Object author") }}
                        {% endif %}

                    </p>
                    <p class="upload-field" id="author-field">
                        {{ form.visible_fields()[1] }}
                        {{ form.visible_fields()[1].errors }}
                    </p>
                    <div class="form-options">
                        <p>
                            <input id="agreement-chk" type="checkbox" name="agreement" value="1">
                            {{ _('I agree to have this content under <a target="_blank" href="https://creativecommons.org/licenses/by-sa/4.0/legalcode">CC BY-SA 4.0</a> and I\'m aware that it can\'t be removed after other people are using it.') }}
                        </p>
                    </div>
                    <input class="submit-btn" onclick="updateValues()" type="submit" value="{{ _('Submit') }}" disabled="disabled"/>
                </form>
            </div>
        </section>

        <script>

            $('#agreement-chk').click(function(){
                if($(this).prop('checked') == true){
                    $('input[type="submit"]').prop('disabled', false);
                }else{
                    $('input[type="submit"]').prop('disabled', true);
                }
            });

            $('#author-chk').click(function(){
                if($(this).prop('checked') == true){
                    let user = $('div.welcome > p > a')[0].innerText;
                    $('#author-field > input').val(user);
                    $('#author-field > input').prop('readonly', true);
                }else{
                    $('#author-field > input').prop('readonly', false);
                    $('#author-field > input').val("");
                }
            });

            $("#id_source").change(
                function(e) {

                    var previous_content_box = document.getElementById('content-box'); 
                    if(previous_content_box){
                        previous_content_box.remove()
                    }


                    var file = e.originalEvent.srcElement.files[0];
                    var image_preview = null;
                    var previewAndLoadFile = null;
                    var content_box = document.createElement("div");
                    content_box.id = "content-box";
                    content_box.style.position = "relative"

                    var close_icon = document.createElement("div");
                    close_icon.id = "close-icon"; 
                    close_icon.style.position =  "absolute" 
                    close_icon.style.top =  "10px"
                    close_icon.style.right =  "10px"
                    close_icon.style.padding =  "5px 10px" 
                    close_icon.style.borderRadius= "5px"
                    close_icon.style.cursor= "pointer"
                    close_icon.style.color =  "white"
                    close_icon.style.background =  "#ff6961"
                    close_icon.innerHTML = "x"
                    close_icon.onclick = function(){
                        this.parentElement.remove(); 
                        document.querySelector('input[type="file"]').value = ""
                    }

                    content_box.appendChild(close_icon);
                    

                    if (file.type === "video/mp4" || file.type === "video/webm") {
                        image_preview = document.createElement("video");
                        previewAndLoadFile = function() {
                            image_preview.src = reader.result;
                            image_preview.id = "img-preview";
                            image_preview.controls = "controls";
                            image_preview.autoplay = "autoplay";
                            image_preview.muted = "muted";
                            document.getElementById("id_source").after(content_box);
                            document.getElementById("content-box").appendChild(image_preview); //make preview image of the object/marker show
                        }
                    } else {
                        image_preview = document.createElement("img");
                        previewAndLoadFile = function() {
                            image_preview.src = reader.result;
                            image_preview.id = "img-preview";
                            document.getElementById("id_source").after(content_box);
                            document.getElementById("content-box").appendChild(image_preview); //make preview image of the object/marker show
                        }
                    }

                    var reader = new FileReader();
                    reader.onloadend = previewAndLoadFile;
                    reader.readAsDataURL(file);
                }
            );

            function updateValues(){
                var image_preview = document.querySelector('#img-preview');
                var high = null;
                var wide = null;
                if (image_preview.tagName == "IMG") {
                    high = image_preview.naturalHeight;
                    wide = image_preview.naturalWidth;
                } else {
                    high = image_preview.videoHeight;
                    wide = image_preview.videoWidth;
                }

                if(high >= wide){
                    var yprop = 1
                    var xprop = (wide*1.0)/high;
                }else{
                    var xprop = 1
                    var yprop = (high*1.0)/wide;
                }

                var scal = document.getElementById('scale').value;
                scal = isNaN(scal) ? 1 : scal;
                var xpos = document.getElementById('X-position').value;
                var ypos = document.getElementById('Y-position').value;
                var scl = scal*xprop + " " + scal*yprop;
                var rot = "270 0 0";
                var pos = xpos + " " + ypos + " 0"; //messing with the Z gives some really weird things

                $('#id_scale').val(scl);
                $('#id_rotation').val(rot);
                $('#id_position').val(pos);
            }

        </script>
    </section>
{% endblock %}